---
- name: ensure sites-available for nginx
  file:
    path: /etc/nginx/sites-available
    state: directory
  become: true

- name: ensure there is an nginx user
  user:
    name: nginx
    comment: "Nginx user"
  become: true

- name: ensure sites-enable for nginx
  file:
    path: /etc/nginx/sites-enabled
    state: directory
  become: true

- name: remove default nginx site
  action: file path=/etc/nginx/sites-enabled/default state=absent
  become: true

- name: check to see if ssl cert needs created
  stat:
    path: "{{ nginx_ssl_cert_path }}"
  become: true
  register: ssl_cert

- include_tasks: ssl.yml
  when: development_server == true or use_self_signed_ssl

- name: "check if {{ nginx_ssl_cert_path }} exists"
  stat:
    path: "{{ nginx_ssl_cert_path }}"
  register: ssl_cert_exists
  become: true

- name: write nginx.conf
  action: template src=../templates/nginx.conf dest=/etc/nginx/nginx.conf
  become: true

- name: enable nginx
  become: true
  action: service name=nginx enabled=true

- name: create nginx site config
  template:
    src: "../templates/nginx_site.conf"
    dest: "/etc/nginx/sites-available/{{ app_name }}.conf"
  become: true
  notify:
    - restart nginx

- name: link nginx config
  file:
    src: "/etc/nginx/sites-available/{{ app_name }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ app_name }}.conf"
    state: "link"
  become: true

- include_tasks: letsencrypt.yml
  when:
    - development_server == false
    - use_letsencrypt
    - not ssl_cert.stat.exists

- name: stop/disable apache2
  become: true
  service:
    name: apache2
    enabled: false
    state: stopped
  failed_when: false
  tags: apachestop

- name: ensure nginx is restarted
  become: true
  action: service name=nginx state=restarted
